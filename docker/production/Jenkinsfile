pipeline {
  agent any
  stages {
        stage('Stopping current container') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh '''docker stop ${GROUP}.production.${PROJECT}
'''
              echo 'Stopped current production container'
            }
          }
        }

        stage('Removing current container') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'docker rm ${GROUP}.production.${PROJECT}'
              echo 'Removed current production container'
            }
          }
        }
      
    stage('Pruning all images') {
      steps {
          sh 'docker image prune -af'
      }
    }
    
    stage('Building') {
      steps {
        sh 'docker-compose --force-recreate --file ./docker/production/docker-compose.yml up -d --build'
        echo 'Completed successfully!'
      }
    }
   
   stage('Creating env symlink') {
      steps {
          sh 'docker exec ${GROUP}.production.${PROJECT} ln -s /envfile/.env /var/www/html/.env'
      }
    }
    
   stage('Running composer update') {
      steps {
        sh 'docker exec ${GROUP}.production.${PROJECT} composer update '
      }
    }
  
    stage('Running composer install') {
      steps {
        sh 'docker exec ${GROUP}.production.${PROJECT} composer install '
      }
    }
   

  }
  environment {
    GROUP = 'menke'
    PROJECT = 'testproject'
  }
}
